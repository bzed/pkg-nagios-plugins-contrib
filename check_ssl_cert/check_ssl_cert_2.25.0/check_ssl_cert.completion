#!/usr/bin/env bash

_check_ssl_cert() {

    HOST_CACHE="${HOME}/.check_ssl_cert-cache"

    local cur prev opts

    COMPREPLY=()

    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD - 1]}"

    # list of command line options
    #   we list only the long version (more readable)
    opts="--file --host --noauth --all --all-local --allow-empty-san --clientcert --critical --check-ciphers --check-ciphers-warnings  --check-ssl-labs-warn --clientpass --crl --curl-bin --curl-user-agent --custom-http-header --dane --date --debug-cert --debug-file --debug-time --dig-bin --ecdsa --element --file-bin --fingerprint --first-element-only --force-dconv-date --force-perl-date --format --http-use-get --ignore-altnames --ignore-connection-problems --ignore-exp --ignore-host-cn --ignore-incomplete-chain --ignore-ocsp --ignore-ocsp-errors --ignore-ocsp-timeout --ignore-sct --ignore-sig-alg --ignore-ssl-labs-cache --ignore-tls-renegotiation --inetproto protocol --info --init-host-cache --issuer-cert-cache --long-output --match --nmap-bin --no-perf --no-proxy --no-proxy-curl --no-proxy-s_client --no-ssl2 --no-ssl3 --no-tls1 --no-tls1_1 --no-tls1_2 --no-tls1_3 --not-issued-by --not-valid-longer-than --ocsp-critical --ocsp-warning --openssl --password --precision --prometheus --proxy --require-client-cert --require-no-ssl2 --require-no-ssl3 --require-no-tls1 --require-no-tls1_1 --require-ocsp-stapling --resolve  --rootcert-dir --rootcert-file --rsa --serial --skip-element --sni --ssl2 --ssl3 --temp --terse --tls1 --tls1_1 --tls1_2 --tls1_3 --xmpphost -4 -6 --clientkey --protocol --version --debug --email --help --issuer --cn --org  --port port --rootcert --quiet --selfsigned --timeout --url --verbose --warning"

    if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]]; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
        return 0
    fi

    # options with arguments
    case "${prev}" in
    # options with files as argument
    -f | --file | -C | --clientcert | --curl-bin | --date | --debug-file | --dig-bin | --file-bin | --issuer-cert-cache | --nmap-bin | --openssl | --rootcert-dir | --rootcert-file | --temp | -K | --clientkey | -r | --rootcert)
        _filedir
        ;;
    # optios with hosts as argument
    -H | --host | --resolve)
        _known_hosts_real "${cur}"
        # concatenate the array with the cached hosts: https://stackoverflow.com/questions/31143874/how-to-concatenate-arrays-in-bash
        COMPREPLY+=($(compgen -W "$(cat ~/.check_ssl_cert-cache | tr "\n" ' ' )" -- ${cur}))
        ;;
    # grades
    --check-ciphers | --check-ssl-labs-warn)
        COMPREPLY=($(compgen -W "A B C D E F" -- ${cur}))
        ;;
    --dane)
        COMPREPLY=($(compgen -W "211 301 302 311 312" -- ${cur}))
        ;;
    --port | -p)
        COMPREPLY=($(compgen -W "21 22 80 443 143 993 194 994 389 636 3306 110 995 5432 4190 25 465 5222 5269" -- ${cur}))
        ;;
    --protocol | -P)
        COMPREPLY=($(compgen -W "ftp ftps http https h2 imap imaps irc ircs ldap ldaps mysql pop3 pop3s postgres sieve smtp smtps xmpp xmpp-server ftp" -- ${cur}))
        ;;
    *) ;;

    esac

}

complete -F _check_ssl_cert check_ssl_cert
